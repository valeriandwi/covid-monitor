{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","useState","chartData","setChartData","useEffect","axios","get","then","res","data","filter","jumlahKasusKumulatif","catch","err","alert","response","options","chart","type","stacked","height","zoom","enabled","autoScaleYaxis","toolbar","autoSelected","dataLabels","markers","size","fill","gradient","shadeIntensity","inverseColors","opacityFrom","opacityTo","stops","yaxis","title","text","style","color","labels","show","colors","axisTicks","xaxis","categories","map","tanggal","formatter","value","timestamp","moment","Date","format","series","name","jumlahKasusBaruperHari","className","Typography","variant","width","marginTop","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"iKAAAA,EAAOC,QAAU,IAA0B,kC,0LCsG5BC,MA9Ff,WAAgB,IAAD,EACoBC,mBAAS,IAD7B,mBACNC,EADM,KACIC,EADJ,KAEbC,qBAAU,WACRC,IAAMC,IAAI,oDACTC,MAAK,SAAAC,GACJL,EAAaK,EAAIC,KAAKA,KAAKC,QAAO,SAAAD,GAAI,OAAkC,OAA9BA,EAAKE,4BAEhDC,OAAM,SAAAC,GAAG,OAAIC,MAAMD,EAAIE,SAASN,WAChC,IAEH,IAAMO,EAAU,CACdC,MAAO,CACLC,KAAM,OACNC,SAAS,EACPC,OAAQ,IACVC,KAAM,CACFH,KAAM,IACNI,SAAS,EACTC,gBAAgB,GAEpBC,QAAS,CACLC,aAAc,SAGpBC,WAAY,CACVJ,SAAS,GAEXK,QAAS,CACPC,KAAM,GAERC,KAAM,CACJX,KAAM,WACNY,SAAU,CACRC,eAAgB,EAChBC,eAAe,EACfC,YAAa,GACbC,UAAW,EACXC,MAAO,CAAC,EAAG,GAAI,OAGnBC,MAAO,CACLC,MAAO,CACLC,KAAM,oBACNC,MAAO,CACLC,MAAO,SAGXC,OAAQ,CACNC,MAAM,EACNH,MAAO,CACLI,OAAQ,SAGZC,UAAW,CACTJ,MAAO,SAGXK,MAAO,CACL3B,KAAM,WACN4B,WAAY5C,EAAU6C,KAAI,SAAAvC,GAAG,OAAIA,EAAIwC,WACrCP,OAAQ,CACNQ,UAAW,SAAUC,EAAOC,GAC1B,OAAOC,IAAO,IAAIC,KAAKH,IAAQI,OAAO,WAExCf,MAAO,CACLI,OAAQ,WAMVY,EAAS,CAAC,CACdC,KAAM,oBACN/C,KAAMP,EAAU6C,KAAI,SAAAvC,GAAG,OAAIA,EAAIiD,4BAGjC,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,6BACE,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKrB,MAAO,CAACC,MAAM,SAAvC,oCACA,kBAAC,IAAD,CACExB,QAASA,EACTuC,OAAQA,EACRrC,KAAK,OACL2C,MAAM,UAER,kBAACF,EAAA,EAAD,CAAYC,QAAQ,QAAQrB,MAAO,CAACC,MAAM,OAAOsB,UAAU,SAA3D,gBCnFUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpE,MAAK,SAAAqE,GACJA,EAAaC,gBAEdjE,OAAM,SAAAkE,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a6c41351.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React,{useEffect,useState} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Chart from 'react-apexcharts';\nimport axios from 'axios';\nimport moment from 'moment';\nimport {Typography} from '@material-ui/core';\n\nfunction App() {\n  const [chartData,setChartData] = useState([]);\n  useEffect(() => {\n    axios.get(\"https://indonesia-covid-19.mathdro.id/api/harian\")\n    .then(res => {\n      setChartData(res.data.data.filter(data => data.jumlahKasusKumulatif !== null))\n    })\n    .catch(err => alert(err.response.data));\n  }, []);\n\n  const options = {\n    chart: {\n      type: 'area',\n      stacked: false,\n        height: 350,\n      zoom: {\n          type: 'x',\n          enabled: true,\n          autoScaleYaxis: true\n      },\n      toolbar: {\n          autoSelected: 'zoom'\n      },\n    },\n    dataLabels: {\n      enabled: false\n    },\n    markers: {\n      size: 0,\n    },\n    fill: {\n      type: 'gradient',\n      gradient: {\n        shadeIntensity: 1,\n        inverseColors: false,\n        opacityFrom: 0.5,\n        opacityTo: 0,\n        stops: [0, 90, 100]\n      },\n    },\n    yaxis: {\n      title: {\n        text: 'Jumlah Kasus Baru',\n        style: {\n          color: \"#fff\"\n        }\n      },\n      labels: {\n        show: true,\n        style: {\n          colors: \"#fff\"\n        }\n      },\n      axisTicks: {\n        color: \"#fff\"\n      }\n    },\n    xaxis: {\n      type: 'datetime',\n      categories: chartData.map(res => res.tanggal),\n      labels: {\n        formatter: function (value, timestamp){\n          return moment(new Date(value)).format(\"DD MMM\") // The formatter function overrides format property\n        }, \n        style: {\n          colors: \"#fff\"\n        }\n      }\n    },\n  }\n  \n  const series = [{\n    name: 'Jumlah Kasus Baru',\n    data: chartData.map(res => res.jumlahKasusBaruperHari)\n  }]\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div>\n          <Typography variant=\"h5\" style={{color:\"#fff\"}}>Perkembangan Kasus Baru COVID-19</Typography>\n          <Chart\n            options={options}\n            series={series}\n            type=\"area\"\n            width=\"800px\"\n          />\n          <Typography variant=\"body2\" style={{color:\"#fff\",marginTop:\"20px\"}}>&#169; VDP</Typography>\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}